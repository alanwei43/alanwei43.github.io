"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[33210],{28453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>c});var o=a(96540);const r={},t=o.createContext(r);function l(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(t.Provider,{value:n},e.children)}},49943:e=>{e.exports=JSON.parse('{"permalink":"/blog/2021/04/03/how-to-create-maven-multi-module-project","editUrl":"https://github.com/alanwei43/blog/tree/master/src/blog/2021/04/03-how-to-create-maven-multi-module-project.md","source":"@site/src/blog/2021/04/03-how-to-create-maven-multi-module-project.md","title":"\u5982\u4f55\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u5e26\u6709\u591a\u4e2a\u5b50\u6a21\u5757\u7684Maven\u9879\u76ee","description":"In this guide, we learn how to create Maven Multi-Module using Command Line with very easy steps. A multi-module project is defined by a parent POM referencing one or more sub-modules. In this example, we will create a blogger web application with different modules. Let\'s create a blogger as parent project and it\'s 3 sub-modules are blogger-core, blogger-common, blogger-web.","date":"2021-04-03T00:00:00.000Z","tags":[{"inline":true,"label":"maven","permalink":"/blog/tags/maven"}],"readingTime":4.165,"hasTruncateMarker":true,"authors":[{"name":"Alan","title":"Maintainer of blog","url":"https://github.com/alanwei43","imageURL":"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4","key":null,"page":null}],"frontMatter":{"title":"\u5982\u4f55\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u5e26\u6709\u591a\u4e2a\u5b50\u6a21\u5757\u7684Maven\u9879\u76ee","author":"Alan","author_title":"Maintainer of blog","author_url":"https://github.com/alanwei43","author_image_url":"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4","tags":["maven"],"draft":false,"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"ASP.Net \u5e94\u7528\u914d\u7f6eHTTP\u4ee3\u7406","permalink":"/blog/2021/04/03/asp.net-proxy-configuration"},"nextItem":{"title":"\u89e3\u51b3 Windows \u73af\u5883\u4e2d git log \u547d\u4ee4\u4e2d\u6587\u7f16\u7801\u95ee\u9898","permalink":"/blog/2021/04/03/powershell-git-chinese-encode"}}')},78704:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var o=a(49943),r=a(74848),t=a(28453);const l={title:"\u5982\u4f55\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u5e26\u6709\u591a\u4e2a\u5b50\u6a21\u5757\u7684Maven\u9879\u76ee",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:["maven"],draft:!1,hide_table_of_contents:!1},c=void 0,i={authorsImageUrls:[void 0]},s=[{value:"Create a Maven Multi Module using Command Line",id:"create-a-maven-multi-module-using-command-line",level:2},{value:"Step 1: Create Parent project - blogger",id:"step-1-create-parent-project---blogger",level:3},{value:"Step 2: Update pom.xml to Declare It as Parent Project",id:"step-2-update-pomxml-to-declare-it-as-parent-project",level:3},{value:"Step 3: Create Sub-modules",id:"step-3-create-sub-modules",level:3},{value:"Step 4: Update Sub-Modules pom.xml to Produce Appropriate Output",id:"step-4-update-sub-modules-pomxml-to-produce-appropriate-output",level:3},{value:"2. Build Multi-Module",id:"2-build-multi-module",level:2},{value:"3. Conclusion",id:"3-conclusion",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In this guide, we learn how to create Maven Multi-Module using Command Line with very easy steps. A multi-module project is defined by a parent POM referencing one or more sub-modules. In this example, we will create a blogger web application with different modules. Let's create a blogger as parent project and it's 3 sub-modules are blogger-core, blogger-common, blogger-web."}),"\n",(0,r.jsx)(n.p,{children:"Real-world examples of maven multi-module projects are:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/RameshMF/junit-developer-guide",children:"https://github.com/RameshMF/junit-developer-guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/spring-projects/spring-framework",children:"https://github.com/spring-projects/spring-framework"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/apache/maven",children:"https://github.com/apache/maven"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/jersey/jersey",children:"https://github.com/jersey/jersey"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"create-a-maven-multi-module-using-command-line",children:"Create a Maven Multi Module using Command Line"}),"\n",(0,r.jsx)(n.p,{children:"Below are the steps to create parent and sub-modules projects."}),"\n",(0,r.jsx)(n.h3,{id:"step-1-create-parent-project---blogger",children:"Step 1: Create Parent project - blogger"}),"\n",(0,r.jsx)(n.p,{children:"To create the Parent project:"}),"\n",(0,r.jsxs)(n.p,{children:["mvn archetype",":generate"," -DgroupId=com.companyname.blogger -DartifactId=blogger\nNote that whole command should be a single line. After build success, we will see below output in the command line console."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-log",children:"[INFO] Parameter: package, Value: com.companyname.blogger\n[INFO] Parameter: groupId, Value: com.companyname.blogger\n[INFO] Parameter: artifactId, Value: blogger\n[INFO] Parameter: packageName, Value: com.companyname.blogger\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[INFO] project created from Old (1.x) Archetype in dir: C:\\Ramesh_Study\\maven\\guides\\blogger\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:09 min\n[INFO] Finished at: 2018-06-20T13:40:40+05:30\n[INFO] ------------------------------------------------------------------------\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-2-update-pomxml-to-declare-it-as-parent-project",children:"Step 2: Update pom.xml to Declare It as Parent Project"}),"\n",(0,r.jsx)(n.p,{children:"Open pom.xml of above-created parent-project and change the packaging to pom."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<packaging>pom</packaging>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The complete ",(0,r.jsx)(n.em,{children:"pom.xml"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.companyname.blogger</groupId>\n  <artifactId>blogger</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <name>blogger</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n'})}),"\n",(0,r.jsx)(n.p,{children:"If you don't change this pom.xml then you will get below build fail error:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-log",children:"[INFO] Parameter: groupId, Value: com.companyname.blogger\n[INFO] Parameter: artifactId, Value: blogger-core\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[INFO] Parameter: package, Value: com.companyname.blogger\n[INFO] Parameter: packageInPathFormat, Value: com/companyname/blogger\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[INFO] Parameter: package, Value: com.companyname.blogger\n[INFO] Parameter: groupId, Value: com.companyname.blogger\n[INFO] Parameter: artifactId, Value: blogger-core\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:49 min\n[INFO] Finished at: 2018-06-20T13:49:18+05:30\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:3.0.1:generate (default-cli) validPackaging: **Unable to add module to the current project as it is not of packaging type 'pom'** -> [Help 1]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-3-create-sub-modules",children:"Step 3: Create Sub-modules"}),"\n",(0,r.jsx)(n.p,{children:"Change directory via below command"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd blogger\n"})}),"\n",(0,r.jsx)(n.p,{children:"Let's create sub-modules in blogger parent project."}),"\n",(0,r.jsx)(n.p,{children:"Create blogger-core module."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mvn archetype:generate -DgroupId=com.companyname.blogger  -DartifactId=blogger-core\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create blogger-common module"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mvn archetype:generate -DgroupId=com.companyname.blogger  -DartifactId=blogger-common\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create blogger-web module and it is web application packaged with war file. The archetype for maven web application is ",(0,r.jsx)(n.code,{children:"-DarchetypeArtifactId=maven-archetype-webapp"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mvn archetype:generate -DgroupId=com.companyname.blogger  -DartifactId=blogger-web -DarchetypeArtifactId=maven-archetype-webapp\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now if you open the blogger parent project ",(0,r.jsx)(n.em,{children:"pom.xml"}),", you will find all three modules being added in there."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:" <modules>\n    <module>blogger-core</module>\n    <module>blogger-common</module>\n    <module>blogger-web</module>\n  </modules>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Also, in each sub-module\u2019s ",(0,r.jsx)(n.em,{children:"pom.xml"}),", a parent section being added."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:" <parent>\n    <artifactId>blogger</artifactId>\n    <groupId>com.companyname.blogger</groupId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-4-update-sub-modules-pomxml-to-produce-appropriate-output",children:"Step 4: Update Sub-Modules pom.xml to Produce Appropriate Output"}),"\n",(0,r.jsx)(n.p,{children:"blogger-core module is package with jar"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<packaging>jar</packaging>\n"})}),"\n",(0,r.jsx)(n.p,{children:"blogger-common module is a package with a jar."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<packaging>jar</packaging>\n"})}),"\n",(0,r.jsx)(n.p,{children:"blogger-web module is already packaging with war."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<packaging>war</packaging>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Let's updated pom.xml files for all the parent and sub-modules."}),"\n",(0,r.jsxs)(n.p,{children:["blogger parent project ",(0,r.jsx)(n.em,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.companyname.blogger</groupId>\n  <artifactId>blogger</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <name>blogger</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  <modules>\n    <module>blogger-common</module>\n    <module>blogger-web</module>\n    <module>blogger-core</module>\n  </modules>\n</project>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["blogger-core sub-module ",(0,r.jsx)(n.em,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <artifactId>blogger</artifactId>\n    <groupId>com.companyname.blogger</groupId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n\n  <groupId>com.companyname.blogger</groupId>\n  <artifactId>blogger-core</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n  <name>blogger-core</name>\n  \x3c!-- FIXME change it to the project\'s website --\x3e\n  <url>http://www.example.com</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.source>1.7</maven.compiler.source>\n    <maven.compiler.target>1.7</maven.compiler.target>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["blogger-common sub-module ",(0,r.jsx)(n.em,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <artifactId>blogger</artifactId>\n    <groupId>com.companyname.blogger</groupId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n\n  <groupId>com.companyname.blogger</groupId>\n  <artifactId>blogger-common</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n  <name>blogger-common</name>\n  \x3c!-- FIXME change it to the project\'s website --\x3e\n  <url>http://www.example.com</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.source>1.7</maven.compiler.source>\n    <maven.compiler.target>1.7</maven.compiler.target>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["blogger-web sub-module ",(0,r.jsx)(n.em,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0"?>\n<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>com.companyname.blogger</groupId>\n    <artifactId>blogger</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  <groupId>com.companyname.blogger</groupId>\n  <artifactId>blogger-web</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>war</packaging>\n  <name>blogger-web Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  <build>\n    <finalName>blogger-web</finalName>\n  </build>\n</project>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"2-build-multi-module",children:"2. Build Multi-Module"}),"\n",(0,r.jsx)(n.p,{children:"To test all the multi-module project setup is correct then run below maven common on blogger parent project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-log",children:"mvn clean install\nThe output of above command\n\n[INFO] Reactor Summary:\n[INFO]\n[INFO] blogger 1.0-SNAPSHOT ............................... SUCCESS [  0.746 s]\n[INFO] blogger-common ..................................... SUCCESS [  5.727 s]\n[INFO] blogger-core ....................................... SUCCESS [  1.775 s]\n[INFO] blogger-web Maven Webapp 1.0-SNAPSHOT .............. SUCCESS [  0.809 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 9.289 s\n[INFO] Finished at: 2018-06-20T14:20:05+05:30\n[INFO] ------------------------------------------------------------------------\n"})}),"\n",(0,r.jsx)(n.p,{children:"That's it. Now can import this project into Eclipse IDE. In Eclipse , File -> Import -> Maven -> Existing Maven projects"}),"\n",(0,r.jsx)(n.h2,{id:"3-conclusion",children:"3. Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"In this guide, we have learned how to create maven Multi-Module using Command Line by taking the bloggerproject as an example."}),"\n",(0,r.jsx)(n.p,{children:"The source code of this multi-module project is available on GitHub."}),"\n",(0,r.jsx)(n.p,{children:"Read my favorite Maven Developers Guide."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.javaguides.net/2018/06/how-to-create-maven-multi-module-using-command-line.html",children:"\u5f15\u7528"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);