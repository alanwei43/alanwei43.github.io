"use strict";(self.webpackChunkalan_blog=self.webpackChunkalan_blog||[]).push([[1272],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),i=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=i(n),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||a;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var i=2;i<a;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},52595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var r=n(87462),o=(n(67294),n(3905));const a={title:"\u4f7f\u7528 Node.js \u6267\u884c\u547d\u4ee4\u884c\u7a0b\u5e8f",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:["node.js"],description:"\u4f7f\u7528 Node.js \u6267\u884c\u547d\u4ee4\u884c\u7a0b\u5e8f",draft:!1,hide_table_of_contents:!1},s=void 0,c={permalink:"/blog/2021/04/11/node-exec-bash-cmd",editUrl:"https://github.com/alanwei43/blog/tree/master/src/blog/2021-04-11-node-exec-bash-cmd.md",source:"@site/src/blog/2021-04-11-node-exec-bash-cmd.md",title:"\u4f7f\u7528 Node.js \u6267\u884c\u547d\u4ee4\u884c\u7a0b\u5e8f",description:"\u4f7f\u7528 Node.js \u6267\u884c\u547d\u4ee4\u884c\u7a0b\u5e8f",date:"2021-04-11T00:00:00.000Z",formattedDate:"April 11, 2021",tags:[{label:"node.js",permalink:"/blog/tags/node-js"}],readingTime:2.62,hasTruncateMarker:!0,authors:[{name:"Alan",title:"Maintainer of blog",url:"https://github.com/alanwei43",imageURL:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4"}],frontMatter:{title:"\u4f7f\u7528 Node.js \u6267\u884c\u547d\u4ee4\u884c\u7a0b\u5e8f",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:["node.js"],description:"\u4f7f\u7528 Node.js \u6267\u884c\u547d\u4ee4\u884c\u7a0b\u5e8f",draft:!1,hide_table_of_contents:!1},prevItem:{title:"\u67e5\u770b\u5f53\u524d\u673a\u5668\u7684\u6240\u6709SSH\u8fde\u63a5",permalink:"/blog/2021/04/11/linux-show-ssh-connection"},nextItem:{title:"Spring Boot Maven \u63d2\u4ef6\u4f7f\u7528",permalink:"/blog/2021/04/11/spring-boot-maven-plugin"}},l={authorsImageUrls:[void 0]},i=[],u={toc:i};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/20643470/execute-a-command-line-binary-with-node-js"},"\u539f\u6587 - Execute a command line binary with Node.js")),(0,o.kt)("p",null,"For even newer version of Node.js (v8.1.4), the events and calls are similar or identical to older versions, but it's encouraged to use the standard newer language features. Examples:"),(0,o.kt)("p",null,"For buffered, non-stream formatted output (you get it all at once), use ",(0,o.kt)("inlineCode",{parentName:"p"},"child_process.exec"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const { exec } = require('child_process');\nexec('cat *.js bad_file | wc -l', (err, stdout, stderr) => {\n  if (err) {\n    // node couldn't execute the command\n    return;\n  }\n\n  // the *entire* stdout and stderr (buffered)\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n")),(0,o.kt)("p",null,"You can also use it with Promises:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\nasync function ls() {\n  const { stdout, stderr } = await exec('ls');\n  console.log('stdout:', stdout);\n  console.log('stderr:', stderr);\n}\nls();\n")),(0,o.kt)("p",null,"If you wish to receive the data gradually in chunks (output as a stream), use child_process.spawn:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { spawn } = require('child_process');\nconst child = spawn('ls', ['-lh', '/usr']);\n\n// use child.stdout.setEncoding('utf8'); if you want text chunks\nchild.stdout.on('data', (chunk) => {\n  // data from standard output is here as buffers\n});\n\n// since these are streams, you can pipe them elsewhere\nchild.stderr.pipe(dest);\n\nchild.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n")),(0,o.kt)("p",null,"Both of these functions have a synchronous counterpart. An example for ",(0,o.kt)("inlineCode",{parentName:"p"},"child_process.execSync"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { execSync } = require('child_process');\n// stderr is sent to stderr of parent process\n// you can set options.stdio if you want it to go elsewhere\nlet stdout = execSync('ls');\n")),(0,o.kt)("p",null,"As well as ",(0,o.kt)("inlineCode",{parentName:"p"},"child_process.spawnSync"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { spawnSync} = require('child_process');\nconst child = spawnSync('ls', ['-lh', '/usr']);\n\nconsole.log('error', child.error);\nconsole.log('stdout ', child.stdout);\nconsole.log('stderr ', child.stderr);\n")),(0,o.kt)("p",null,"Note: The following code is still functional, but is primarily targeted at users of ES5 and before."),(0,o.kt)("p",null,"The module for spawning child processes with Node.js is well documented in the documentation (v5.0.0). To execute a command and fetch its complete output as a buffer, use child_process.exec:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var exec = require('child_process').exec;\nvar cmd = 'prince -v builds/pdf/book.html -o builds/pdf/book.pdf';\n\nexec(cmd, function(error, stdout, stderr) {\n  // command output is in stdout\n});\nIf you need to use handle process I/O with streams, such as when you are expecting large amounts of output, use child_process.spawn:\n\nvar spawn = require('child_process').spawn;\nvar child = spawn('prince', [\n  '-v', 'builds/pdf/book.html',\n  '-o', 'builds/pdf/book.pdf'\n]);\n\nchild.stdout.on('data', function(chunk) {\n  // output will be here in chunks\n});\n\n// or if you want to send output elsewhere\nchild.stdout.pipe(dest);\n")),(0,o.kt)("p",null,"If you are executing a file rather than a command, you might want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"child_process.execFile"),", which parameters which are almost identical to spawn, but has a fourth callback parameter like exec for retrieving output buffers. That might look a bit like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var execFile = require('child_process').execFile;\nexecFile(file, args, options, function(error, stdout, stderr) {\n  // command output is in stdout\n});\n")),(0,o.kt)("p",null,"As of v0.11.12, Node now supports synchronous spawn and exec. All of the methods described above are asynchronous, and have a synchronous counterpart. Documentation for them can be found here. While they are useful for scripting, do note that unlike the methods used to spawn child processes asynchronously, the synchronous methods do not return an instance of ChildProcess."))}d.isMDXComponent=!0}}]);