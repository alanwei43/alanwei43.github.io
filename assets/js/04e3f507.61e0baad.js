"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[91371],{28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var t=a(96540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},71513:e=>{e.exports=JSON.parse('{"permalink":"/blog/2021/03/06/how-can-i-create-an-executable-jar-with-dependencies-using-maven","editUrl":"https://github.com/alanwei43/blog/tree/master/src/blog/2021/03/06-how-can-i-create-an-executable-jar-with-dependencies-using-maven.md","source":"@site/src/blog/2021/03/06-how-can-i-create-an-executable-jar-with-dependencies-using-maven.md","title":"\u5982\u4f55\u4f7f\u7528Maven\u521b\u5efa\u53ef\u6267\u884c\u7684JAR\u6587\u4ef6","description":"\u539f\u6587 - \u4f7f\u7528Maven\u6253\u5305\u53ef\u6267\u884cJAR\u7a0b\u5e8f","date":"2021-03-06T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"maven","permalink":"/blog/tags/maven"}],"readingTime":1.3,"hasTruncateMarker":true,"authors":[{"name":"Alan","title":"Maintainer of blog","url":"https://github.com/alanwei43","imageURL":"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4","key":null,"page":null}],"frontMatter":{"title":"\u5982\u4f55\u4f7f\u7528Maven\u521b\u5efa\u53ef\u6267\u884c\u7684JAR\u6587\u4ef6","author":"Alan","author_title":"Maintainer of blog","author_url":"https://github.com/alanwei43","author_image_url":"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4","tags":["java","maven"],"draft":false,"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"\u4f7f\u7528Maven\u521b\u5efa\u4e00\u4e2aJava\u9879\u76ee","permalink":"/blog/2021/03/06/create-java-project-use-maven"},"nextItem":{"title":"\u914d\u7f6e\u53f3\u51fb\u4f7f\u7528Sublime\u6253\u5f00\u6587\u4ef6\u5939","permalink":"/blog/2021/03/06/sublime-right-click-open"}}')},86733:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var t=a(71513),i=a(74848),s=a(28453);const r={title:"\u5982\u4f55\u4f7f\u7528Maven\u521b\u5efa\u53ef\u6267\u884c\u7684JAR\u6587\u4ef6",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:["java","maven"],draft:!1,hide_table_of_contents:!1},l=void 0,o={authorsImageUrls:[void 0]},c=[{value:"\u65b9\u6848 1",id:"\u65b9\u6848-1",level:2},{value:"\u65b9\u6848 2",id:"\u65b9\u6848-2",level:2},{value:"\u65b9\u6848 3",id:"\u65b9\u6848-3",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven",children:"\u539f\u6587 - \u4f7f\u7528Maven\u6253\u5305\u53ef\u6267\u884cJAR\u7a0b\u5e8f"})}),"\n",(0,i.jsx)(n.h2,{id:"\u65b9\u6848-1",children:"\u65b9\u6848 1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<build>\n  <plugins>\n    <plugin>\n      <artifactId>maven-assembly-plugin</artifactId>\n      <configuration>\n        <archive>\n          <manifest>\n            <mainClass>fully.qualified.MainClass</mainClass>\n          </manifest>\n        </archive>\n        <descriptorRefs>\n          <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n"})}),"\n",(0,i.jsx)(n.p,{children:"and you run it with"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mvn clean compile assembly:single\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u65b9\u6848-2",children:"\u65b9\u6848 2"}),"\n",(0,i.jsx)(n.p,{children:"You can use the dependency-plugin to generate all dependencies in a separate directory before the package phase and then include that in the classpath of the manifest:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-dependency-plugin</artifactId>\n    <executions>\n        <execution>\n            <id>copy-dependencies</id>\n            <phase>prepare-package</phase>\n            <goals>\n                <goal>copy-dependencies</goal>\n            </goals>\n            <configuration>\n                <outputDirectory>${project.build.directory}/lib</outputDirectory>\n                <overWriteReleases>false</overWriteReleases>\n                <overWriteSnapshots>false</overWriteSnapshots>\n                <overWriteIfNewer>true</overWriteIfNewer>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <classpathPrefix>lib/</classpathPrefix>\n                <mainClass>theMainClass</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively use ",(0,i.jsx)(n.code,{children:"${project.build.directory}/classes/lib"})," as OutputDirectory to integrate all jar-files into the main jar, but then you will need to add custom classloading code to load the jars."]}),"\n",(0,i.jsx)(n.h2,{id:"\u65b9\u6848-3",children:"\u65b9\u6848 3"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://robert-reiz.com/2011/10/19/uber-jar-with-maven/",children:"Uber JAR with Maven"})}),"\n",(0,i.jsx)(n.p,{children:"By default maven is generating a small JAR file, which just contains your compiled classes and other project files. If you want to have a single JAR file which also includes all dependent JAR files, you have to create a uber JAR. You can do that with the maven shade plugin. Just put this lines of xml into your pom.xml."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <version>1.4</version>\n            <executions>\n                <execution>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>shade</goal>\n                    </goals>\n                    <configuration>\n                        <shadedArtifactAttached>true</shadedArtifactAttached>\n                        <shadedClassifierName>all</shadedClassifierName>\n                    </configuration>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n"})}),"\n",(0,i.jsx)(n.p,{children:"In Maven you can solve every problem. You just need enough XML code for that. If you still have problems, than probably your pom.xml is to short."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);