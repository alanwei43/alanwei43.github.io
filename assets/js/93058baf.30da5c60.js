"use strict";(self.webpackChunkalan_blog=self.webpackChunkalan_blog||[]).push([[19877],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(o,".").concat(m)]||d[m]||u[m]||s;return t?r.createElement(h,l(l({ref:n},p),{},{components:t})):r.createElement(h,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<s;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},24299:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=t(87462),a=t(63366),s=(t(67294),t(3905)),l=["components"],i={title:"\u4e8b\u4ef6",hide_title:!1,hide_table_of_contents:!1,keywords:["okhttp","java"],description:"OkHttp \u4e8b\u4ef6"},o=void 0,c={unversionedId:"articles/okhttp-guide/events",id:"articles/okhttp-guide/events",title:"\u4e8b\u4ef6",description:"OkHttp \u4e8b\u4ef6",source:"@site/src/docs/articles/okhttp-guide/5-events.md",sourceDirName:"articles/okhttp-guide",slug:"/articles/okhttp-guide/events",permalink:"/docs/articles/okhttp-guide/events",editUrl:"https://github.com/alanwei43/blog/tree/master/src/docs/articles/okhttp-guide/5-events.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"\u4e8b\u4ef6",hide_title:!1,hide_table_of_contents:!1,keywords:["okhttp","java"],description:"OkHttp \u4e8b\u4ef6"},sidebar:"tutorialSidebar",previous:{title:"\u8fde\u63a5",permalink:"/docs/articles/okhttp-guide/connections"},next:{title:"HTTPS",permalink:"/docs/articles/okhttp-guide/https"}},p={},u=[{value:"EventListener",id:"eventlistener",level:2},{value:"EventListener.Factory",id:"eventlistenerfactory",level:2},{value:"Events with Failures",id:"events-with-failures",level:2},{value:"Events with Retries and Follow-Ups",id:"events-with-retries-and-follow-ups",level:2},{value:"Availability",id:"availability",level:2}],d={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Events allow you to capture metrics on your application\u2019s HTTP calls. Use events to monitor:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The size and frequency of the HTTP calls your application makes. If you\u2019re making too many calls, or your calls are too large, you should know about it!"),(0,s.kt)("li",{parentName:"ul"},"The performance of these calls on the underlying network. If the network\u2019s performance isn\u2019t sufficient, you need to either improve the network or use less of it.")),(0,s.kt)("h2",{id:"eventlistener"},"EventListener"),(0,s.kt)("p",null,"Subclass ",(0,s.kt)("a",{parentName:"p",href:"https://square.github.io/okhttp/3.x/okhttp/okhttp3/EventListener.html"},"EventListener")," and override methods for the events you are interested in. In a successful HTTP call with no redirects or retries the sequence of events is described by this flow."),(0,s.kt)("p",null,"![Events Diagram}(",(0,s.kt)("a",{parentName:"p",href:"https://square.github.io/okhttp/images/events%402x.png"},"https://square.github.io/okhttp/images/events%402x.png"),")"),(0,s.kt)("p",null,"Here\u2019s a ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java"},"sample event listener")," that prints each event with a timestamp."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class PrintingEventListener extends EventListener {\n  private long callStartNanos;\n\n  private void printEvent(String name) {\n    long nowNanos = System.nanoTime();\n    if (name.equals("callStart")) {\n      callStartNanos = nowNanos;\n    }\n    long elapsedNanos = nowNanos - callStartNanos;\n    System.out.printf("%.3f %s%n", elapsedNanos / 1000000000d, name);\n  }\n\n  @Override public void callStart(Call call) {\n    printEvent("callStart");\n  }\n\n  @Override public void callEnd(Call call) {\n    printEvent("callEnd");\n  }\n\n  @Override public void dnsStart(Call call, String domainName) {\n    printEvent("dnsStart");\n  }\n\n  @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {\n    printEvent("dnsEnd");\n  }\n\n  // ...\n}\n')),(0,s.kt)("p",null,"We make a couple calls:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'Request request = new Request.Builder()\n    .url("https://publicobject.com/helloworld.txt")\n    .build();\n\nSystem.out.println("REQUEST 1 (new connection)");\ntry (Response response = client.newCall(request).execute()) {\n  // Consume and discard the response body.\n  response.body().source().readByteString();\n}\n\nSystem.out.println("REQUEST 2 (pooled connection)");\ntry (Response response = client.newCall(request).execute()) {\n  // Consume and discard the response body.\n  response.body().source().readByteString();\n}\n')),(0,s.kt)("p",null,"And the listener prints the corresponding events:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"REQUEST 1 (new connection)\n0.000 callStart\n0.010 dnsStart\n0.017 dnsEnd\n0.025 connectStart\n0.117 secureConnectStart\n0.586 secureConnectEnd\n0.586 connectEnd\n0.587 connectionAcquired\n0.588 requestHeadersStart\n0.590 requestHeadersEnd\n0.591 responseHeadersStart\n0.675 responseHeadersEnd\n0.676 responseBodyStart\n0.679 responseBodyEnd\n0.679 connectionReleased\n0.680 callEnd\nREQUEST 2 (pooled connection)\n0.000 callStart\n0.001 connectionAcquired\n0.001 requestHeadersStart\n0.001 requestHeadersEnd\n0.002 responseHeadersStart\n0.082 responseHeadersEnd\n0.082 responseBodyStart\n0.082 responseBodyEnd\n0.083 connectionReleased\n0.083 callEnd\n")),(0,s.kt)("p",null,"Notice how no connect events are fired for the second call. It reused the connection from the first request for dramatically better performance."),(0,s.kt)("h2",{id:"eventlistenerfactory"},"EventListener.Factory"),(0,s.kt)("p",null,"In the preceding example we used a field, ",(0,s.kt)("inlineCode",{parentName:"p"},"callStartNanos"),", to track the elapsed time of each event. This is handy, but it won\u2019t work if multiple calls are executing concurrently. To accommodate this, use a ",(0,s.kt)("inlineCode",{parentName:"p"},"Factory")," to create a new ",(0,s.kt)("inlineCode",{parentName:"p"},"EventListener")," instance for each ",(0,s.kt)("inlineCode",{parentName:"p"},"Call"),". This allows each listener to keep call-specific state."),(0,s.kt)("p",null,"This ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java"},"sample factory")," creates a unique ID for each call and uses that ID to differentiate calls in log messages."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class PrintingEventListener extends EventListener {\n  public static final Factory FACTORY = new Factory() {\n    final AtomicLong nextCallId = new AtomicLong(1L);\n\n    @Override public EventListener create(Call call) {\n      long callId = nextCallId.getAndIncrement();\n      System.out.printf("%04d %s%n", callId, call.request().url());\n      return new PrintingEventListener(callId, System.nanoTime());\n    }\n  };\n\n  final long callId;\n  final long callStartNanos;\n\n  public PrintingEventListener(long callId, long callStartNanos) {\n    this.callId = callId;\n    this.callStartNanos = callStartNanos;\n  }\n\n  private void printEvent(String name) {\n    long elapsedNanos = System.nanoTime() - callStartNanos;\n    System.out.printf("%04d %.3f %s%n", callId, elapsedNanos / 1000000000d, name);\n  }\n\n  @Override public void callStart(Call call) {\n    printEvent("callStart");\n  }\n\n  @Override public void callEnd(Call call) {\n    printEvent("callEnd");\n  }\n\n  // ...\n}\n')),(0,s.kt)("p",null,"We can use this listener to race a pair of concurrent HTTP requests:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'Request washingtonPostRequest = new Request.Builder()\n    .url("https://www.washingtonpost.com/")\n    .build();\nclient.newCall(washingtonPostRequest).enqueue(new Callback() {\n  ...\n});\n\nRequest newYorkTimesRequest = new Request.Builder()\n    .url("https://www.nytimes.com/")\n    .build();\nclient.newCall(newYorkTimesRequest).enqueue(new Callback() {\n  ...\n});\n')),(0,s.kt)("p",null,"Running this race over home WiFi shows the Times (",(0,s.kt)("inlineCode",{parentName:"p"},"0002"),") completes just slightly sooner than the Post (",(0,s.kt)("inlineCode",{parentName:"p"},"0001"),"):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"0001 https://www.washingtonpost.com/\n0001 0.000 callStart\n0002 https://www.nytimes.com/\n0002 0.000 callStart\n0002 0.010 dnsStart\n0001 0.013 dnsStart\n0001 0.022 dnsEnd\n0002 0.019 dnsEnd\n0001 0.028 connectStart\n0002 0.025 connectStart\n0002 0.072 secureConnectStart\n0001 0.075 secureConnectStart\n0001 0.386 secureConnectEnd\n0002 0.390 secureConnectEnd\n0002 0.400 connectEnd\n0001 0.403 connectEnd\n0002 0.401 connectionAcquired\n0001 0.404 connectionAcquired\n0001 0.406 requestHeadersStart\n0002 0.403 requestHeadersStart\n0001 0.414 requestHeadersEnd\n0002 0.411 requestHeadersEnd\n0002 0.412 responseHeadersStart\n0001 0.415 responseHeadersStart\n0002 0.474 responseHeadersEnd\n0002 0.475 responseBodyStart\n0001 0.554 responseHeadersEnd\n0001 0.555 responseBodyStart\n0002 0.554 responseBodyEnd\n0002 0.554 connectionReleased\n0002 0.554 callEnd\n0001 0.624 responseBodyEnd\n0001 0.624 connectionReleased\n0001 0.624 callEnd\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"EventListener.Factory")," also makes it possible to limit metrics to a subset of calls. This one captures metrics on a random 10%:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"class MetricsEventListener extends EventListener {\n  private static final Factory FACTORY = new Factory() {\n    @Override public EventListener create(Call call) {\n      if (Math.random() < 0.10) {\n        return new MetricsEventListener(call);\n      } else {\n        return EventListener.NONE;\n      }\n    }\n  };\n\n  ...\n}\n")),(0,s.kt)("h2",{id:"events-with-failures"},"Events with Failures"),(0,s.kt)("p",null,"When an operation fails, a failure method is called. This is connectFailed() for failures while building a connection to the server, and callFailed() when the HTTP call fails permanently. When a failure happens it is possible that a start event won\u2019t have a corresponding end event."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://square.github.io/okhttp/images/events_with_failures%402x.png",alt:"Events Diagram"})),(0,s.kt)("h2",{id:"events-with-retries-and-follow-ups"},"Events with Retries and Follow-Ups"),(0,s.kt)("p",null,"OkHttp is resilient and can automatically recover from some connectivity failures. In this case, the ",(0,s.kt)("inlineCode",{parentName:"p"},"connectFailed()")," event is not terminal and not followed by ",(0,s.kt)("inlineCode",{parentName:"p"},"callFailed()"),". Event listeners will receive multiple events of the same type when retries are attempted."),(0,s.kt)("p",null,"A single HTTP call may require follow-up requests to be made to handle authentication challenges, redirects, and HTTP-layer timeouts. In such cases multiple connections, requests, and responses may be attempted. Follow-ups are another reason a single call may trigger multiple events of the same type."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://square.github.io/okhttp/images/events_with_failures_and_retries%402x.png",alt:"Events Diagram"})),(0,s.kt)("h2",{id:"availability"},"Availability"),(0,s.kt)("p",null,"Events is available as a public API in OkHttp 3.11. Future releases may introduce new event types; you will need to override the corresponding methods to handle them."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://square.github.io/okhttp/events/"},"\u539f\u6587 - Events"))))}m.isMDXComponent=!0}}]);