"use strict";(self.webpackChunkalan_blog=self.webpackChunkalan_blog||[]).push([[94674],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=l,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},16405:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],o={title:".Net Script \u7b80\u4ecb",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:[".net",".net core"],draft:!1,hide_table_of_contents:!1},p=void 0,s={permalink:"/blog/2022/03/16/dotnet-script-intro",editUrl:"https://github.com/alanwei43/blog/tree/master/src/blog/2022-03-16-dotnet-script-intro.md",source:"@site/src/blog/2022-03-16-dotnet-script-intro.md",title:".Net Script \u7b80\u4ecb",description:".Net Core \u5de5\u5177 dotnet-script \u7b80\u4ecb",date:"2022-03-16T00:00:00.000Z",formattedDate:"March 16, 2022",tags:[{label:".net",permalink:"/blog/tags/net"},{label:".net core",permalink:"/blog/tags/net-core"}],readingTime:19.165,truncated:!0,authors:[{name:"Alan",title:"Maintainer of blog",url:"https://github.com/alanwei43",imageURL:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4"}],frontMatter:{title:".Net Script \u7b80\u4ecb",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:[".net",".net core"],draft:!1,hide_table_of_contents:!1},prevItem:{title:"Flutter QA",permalink:"/blog/2022/03/24/flutter-qa"},nextItem:{title:".Net Core QA",permalink:"/blog/2022/03/16/dotnet-starter"}},c={authorsImageUrls:[void 0]},d=[{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2},{value:"\u5b89\u88c5",id:"\u5b89\u88c5",level:2},{value:"\u8981\u6c42",id:"\u8981\u6c42",level:3},{value:".Net Core 2.1 Global Tool",id:"net-core-21-global-tool",level:3},{value:"Windows",id:"windows",level:3},{value:"Linux and Mac",id:"linux-and-mac",level:3},{value:"Docker",id:"docker",level:3},{value:"Github",id:"github",level:3},{value:"Usage",id:"usage",level:2},{value:"\u811a\u624b\u67b6",id:"\u811a\u624b\u67b6",level:3},{value:"\u8fd0\u884c\u811a\u672c",id:"\u8fd0\u884c\u811a\u672c",level:3},{value:"\u5411\u811a\u672c\u4e2d\u4f20\u9012\u53c2\u6570",id:"\u5411\u811a\u672c\u4e2d\u4f20\u9012\u53c2\u6570",level:4},{value:"NuGet \u5305",id:"nuget-\u5305",level:3},{value:"Nuget\u5305\u6e90",id:"nuget\u5305\u6e90",level:4},{value:"\u4eceCSX\u6587\u4ef6\u521b\u5efaDLL\u6216\u8005\u53ef\u6267\u884c\u6587\u4ef6",id:"\u4ececsx\u6587\u4ef6\u521b\u5efadll\u6216\u8005\u53ef\u6267\u884c\u6587\u4ef6",level:3},{value:"\u7f13\u5b58",id:"\u7f13\u5b58",level:3},{value:"\u4f9d\u8d56\u7f13\u5b58 Dependency Cache",id:"\u4f9d\u8d56\u7f13\u5b58-dependency-cache",level:4},{value:"Execution cache",id:"execution-cache",level:4},{value:"\u8c03\u8bd5",id:"\u8c03\u8bd5",level:3},{value:"\u811a\u672c\u5305 Script Packages",id:"\u811a\u672c\u5305-script-packages",level:3},{value:"\u521b\u5efa\u811a\u672c\u5305",id:"\u521b\u5efa\u811a\u672c\u5305",level:4},{value:"\u6d88\u8d39\u811a\u672c\u5305",id:"\u6d88\u8d39\u811a\u672c\u5305",level:4},{value:"\u8fdc\u7a0b\u811a\u672c",id:"\u8fdc\u7a0b\u811a\u672c",level:3},{value:"Script Location",id:"script-location",level:3},{value:"REPL",id:"repl",level:2},{value:"\u57fa\u672c\u4f7f\u7528",id:"\u57fa\u672c\u4f7f\u7528",level:3},{value:"Inline Nuget packages",id:"inline-nuget-packages",level:3},{value:"Multiline mode",id:"multiline-mode",level:3},{value:"REPL commands",id:"repl-commands",level:3},{value:"Seeding REPL with a script",id:"seeding-repl-with-a-script",level:3},{value:"\u7ba1\u9053",id:"\u7ba1\u9053",level:2},{value:"\u8c03\u8bd5",id:"\u8c03\u8bd5-1",level:3},{value:"Configuration(Debug/Release)",id:"configurationdebugrelease",level:2},{value:"Team",id:"team",level:2},{value:"License",id:"license",level:2}],u={toc:d};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,".Net Core \u5de5\u5177 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script")," \u7b80\u4ecb"),(0,r.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"> dotnet tool install -g dotnet-script  # \u5b89\u88c5 dotnet-script\n> dotnet script --help # \u663e\u793a\u5e2e\u52a9\u6587\u6863\n> dotnet script init # \u521b\u5efa\u811a\u624b\u67b6\u811a\u672c\n> dotnet script # \u8fdb\u5165 REPL \u6a21\u5f0f\n> dotnet script hello.csx -i # \u6267\u884c\u811a\u672c hell.csx \u540e\u8fdb\u5165 REPL \u6a21\u5f0f\n> dotnet script hello.csx # \u6267\u884c\u811a\u672c hello.csx\n> dotnet script -d hello.csx # \u4ee5debug\u6a21\u5f0f\u6267\u884c\u811a\u672c hello.csx\n> dotnet script -d hello.csx -- arg1 arg2 # \u4ee5debug\u6a21\u5f0f\u6267\u884c\u811a\u672c hello.csx, \u5e76\u4f20\u5165\u4e24\u4e2a\u53c2\u6570: arg1, arg2. \u811a\u672c\u5185\u90e8\u4f7f\u7528\u5168\u5c40\u53d8\u91cf Args \u63a5\u6536\u53c2\u6570.\n> dotnet script hello.csx -s https://SomePackageSource1 -s https://SomePackageSource2 # \u6267\u884c\u811a\u672c\u65f6\u6307\u5b9a\u591a\u4e2aNuget\u5305\u6e90\u5730\u5740\n> dotnet script https://dwz.cn/xpsKTaoi # \u6267\u884c\u8fdc\u7a0b\u811a\u672c\n> ls -al | dotnet script UpperCase.csx # \u63a5\u6536\u7ba1\u9053\u8f93\u5165\n> dotnet script exec path_to_dll -- arg1 arg2 # \u6267\u884c dll \u6587\u4ef6, \u5e76\u4f20\u5165\u4e24\u4e2a\u53c2\u6570: arg1, arg2.\n> dotnet script publish main.csx -o publish_dir -c Release # \u7f16\u8bd1\u811a\u672c\u4e3a\u72ec\u7acb\u53ef\u6267\u884c\u7a0b\u5e8f\n")),(0,r.kt)("p",null,"\u811a\u672c\u5185\u6307\u4ee4:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u9996\u884c\u52a0\u5165 ",(0,r.kt)("inlineCode",{parentName:"li"},"#!/usr/bin/env dotnet-script"),", \u5e76\u628a\u811a\u672c\u6587\u4ef6\u66f4\u6539\u4e3a\u53ef\u6267\u884c\u6587\u4ef6, \u53ef\u4ee5\u76f4\u63a5\u6267\u884c."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'#r "nuget: Newtonsoft.Json, 12.0.2"')," \u5f15\u7528nuget\u5305"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'#load "nuget:simple-targets-csx, 6.0.0"')," \u5f15\u7528nuget\u4e0a\u7684\u811a\u672c\u5305"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'#load "./other-script.csx"')," \u5f15\u7528\u5176\u4ed6\u811a\u672c\u6587\u4ef6")),(0,r.kt)("p",null,"\u6765\u6e90 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/filipw/dotnet-script/blob/master/README.md"},"filipw/dotnet-script")),(0,r.kt)("p",null,"\u4f7f\u7528.Net CLI\u8fd0\u884cC#\u811a\u672c, \u4f7f\u7528VS Code\u7f16\u8f91\u811a\u672c\u5e76\u5f15\u7528Nuget\u5305. \u6240\u6709OmniSharp\u652f\u6301\u7684\u8bed\u8a00\u90fd\u652f\u6301\u8fd9\u4e9b\u7279\u6027."),(0,r.kt)("h2",{id:"\u5b89\u88c5"},"\u5b89\u88c5"),(0,r.kt)("h3",{id:"\u8981\u6c42"},"\u8981\u6c42"),(0,r.kt)("p",null,"\u6211\u4eec\u53ea\u9700\u8981\u5b89\u88c5 ",(0,r.kt)("a",{parentName:"p",href:"https://www.microsoft.com/net/download/core"},".Net Core 2.1+ SDK")," \u5373\u53ef."),(0,r.kt)("h3",{id:"net-core-21-global-tool"},".Net Core 2.1 Global Tool"),(0,r.kt)("p",null,".Net Core 2.1 \u589e\u52a0\u4e86\u5168\u5c40\u5de5\u5177(global tool)\u7684\u6982\u5ff5, \u8fd9\u610f\u5473\u7740\u4f60\u53ea\u9700\u8981.Net CLI\u5c31\u53ef\u4ee5\u5b89\u88c5 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"> dotnet tool install -g dotnet-script\n\nTools directory '/Users/alan/.dotnet/tools' is not currently on the PATH environment variable.\nIf you are using bash, you can add it to your profile by running the following command:\n\ncat << \\EOF >> ~/.bash_profile\n# Add .NET Core SDK tools\nexport PATH=\"$PATH:/Users/alan/.dotnet/tools\"\nEOF\n\nYou can add it to the current session by running the following command:\n\nexport PATH=\"$PATH:/Users/alan/.dotnet/tools\"\n\nYou can invoke the tool using the following command: dotnet-script\nTool 'dotnet-script' (version '0.29.1') was successfully installed.\n")),(0,r.kt)("p",null,"\u8fd9\u79cd\u65b9\u5f0f\u7684\u597d\u5904\u662f\u4f60\u53ef\u8de8\u5e73\u53f0\u4f7f\u7528\u76f8\u540c\u7684\u547d\u4ee4\u5b89\u88c5 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"/Users/alan")," \u662f\u6211\u7684\u7528\u6237\u76ee\u5f55, \u5b89\u88c5\u5b8c\u6210\u540e\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script")," \u547d\u4ee4, \u4f60\u53ef\u4ee5\u628a\u76ee\u5f55",(0,r.kt)("inlineCode",{parentName:"p"},"/Users/alan/.dotnet/tools"),"\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),"\u4e2d, \u6216\u8005\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"ln -s /Users/alan/.dotnet/tools/dotnet-script /usr/local/bin/dotnet-script"),"\u6dfb\u52a0\u5230\u73b0\u6709\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),"\u76ee\u5f55\u4e2d.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u4f7f\u7528 .Net CLI \u5b89\u88c5\u5b8c ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script")," \u540e, \u9700\u8981\u68c0\u67e5\u662f\u5426\u6dfb\u52a0\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"DOTNET_ROOT"),"\u73af\u5883\u53d8\u91cf, \u5426\u5219\u6267\u884c",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script"),"\u540e\u4f1a\u62a5\u4ee5\u4e0b\u9519\u8bef: "),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ dotnet-script \nA fatal error occurred, the required library libhostfxr.dylib could not be found.\nIf this is a self-contained application, that library should exist in [/Users/alan/.dotnet/tools/.store/dotnet-script/0.29.1/dotnet-script/0.29.1/tools/netcoreapp2.1/any/].\nIf this is a framework-dependent application, install the runtime in the default location [/usr/local/share/dotnet] or use the DOTNET_ROOT environment variable to specify the > runtime location.\n")),(0,r.kt)("p",{parentName:"blockquote"},"\u5982\u679c\u4f60\u662f\u4f7f\u7528\u5b98\u65b9\u5b89\u88c5\u5305(Installer), \u800c\u4e0d\u662f\u4e0b\u8f7d\u4e8c\u8fdb\u5236\u5305(Binaries)\u5b89\u88c5\u7684.Net Core, \u90a3\u4e48\u5b89\u88c5\u5b8c\u6210\u540e\u7cfb\u7edf\u53ef\u80fd\u5c31\u5df2\u7ecf\u589e\u52a0\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"DOTNET_ROOT"),"\u73af\u5883\u53d8\u91cf, \u73af\u5883\u53d8\u91cf\u7684\u503c\u662f.Net Core\u7684\u5b89\u88c5\u76ee\u5f55, \u6bd4\u5982\u6211\u7684\u7cfb\u7edf\u53ef\u80fd\u5c31\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"export DOTNET_ROOT=/usr/local/dotnet-sdk-2.2.104"),". ")),(0,r.kt)("p",null,".NET Core SDK \u4e5f\u652f\u6301\u67e5\u770b\u5df2\u7ecf\u5b89\u88c5\u7684\u5de5\u5177\u5217\u8868, \u4ee5\u53ca\u5378\u8f7d\u529f\u80fd: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet tool list -g\n\nPackage Id         Version      Commands\n---------------------------------------------\ndotnet-script      0.22.0       dotnet-script\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet tool uninstall dotnet-script -g\n\nTool 'dotnet-script' (version '0.22.0') was successfully uninstalled.\n")),(0,r.kt)("h3",{id:"windows"},"Windows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"choco install dotnet.script\n")),(0,r.kt)("p",null,"\u6211\u4eec\u4e5f\u63d0\u4f9b\u4e86PowerShell\u5b89\u88c5\u811a\u672c: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},'(new-object Net.WebClient).DownloadString("https://raw.githubusercontent.com/filipw/dotnet-script/master/install/install.ps1") | iex\n')),(0,r.kt)("h3",{id:"linux-and-mac"},"Linux and Mac"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -s https://raw.githubusercontent.com/filipw/dotnet-script/master/install/install.sh | bash\n")),(0,r.kt)("p",null,"\u5982\u679c\u6743\u9650\u4e0d\u5141\u8bb8, \u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"sudo"),": "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -s https://raw.githubusercontent.com/filipw/dotnet-script/master/install/install.sh | sudo bash\n")),(0,r.kt)("h3",{id:"docker"},"Docker"),(0,r.kt)("p",null,"\u5728Linux\u5bb9\u5668\u4e2d\u8fd0\u884c ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script")," \u7684 Dockerfile \u4e5f\u662f\u88ab\u652f\u6301\u7684. \u5f00\u59cb\u6784\u5efa\u955c\u50cf: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd build\ndocker build -t dotnet-script -f Dockerfile ..\n")),(0,r.kt)("p",null,"\u7136\u540e\u6267\u884c: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -it dotnet-script --version\n")),(0,r.kt)("h3",{id:"github"},"Github"),(0,r.kt)("p",null,"\u4f60\u4e5f\u53ef\u4ee5\u4ece",(0,r.kt)("a",{parentName:"p",href:"https://github.com/filipw/dotnet-script/releases"},"Github releases page"),"\u624b\u52a8\u4e0b\u8f7d\u6240\u6709",(0,r.kt)("inlineCode",{parentName:"p"},"zip"),"\u683c\u5f0f\u7684\u7248\u672c."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"dotnet script\u4e2d\u7ecf\u5178\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"helloworld.csx")," \u6f14\u793a\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'Console.WriteLine("Hello world!");\n')),(0,r.kt)("p",null,"\u8fd9\u5c31\u5df2\u7ecf\u5b8c\u6210\u4e86, \u6211\u4eec\u53ef\u4ee5\u6267\u884c\u8fd9\u6bb5\u811a\u672c\u4e86(\u53c2\u6570\u5217\u8868\u53ef\u4ee5\u901a\u8fc7\u5168\u5c40\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"Args"),"\u6570\u7ec4\u8bbf\u95ee): "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script helloworld.csx\n")),(0,r.kt)("h3",{id:"\u811a\u624b\u67b6"},"\u811a\u624b\u67b6"),(0,r.kt)("p",null,"\u5728\u4f60\u7684\u7cfb\u7edf\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939, \u7136\u540e\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script init\n")),(0,r.kt)("p",null,"\u8fd9\u4f1a\u521b\u5efa\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.csx")," \u6587\u4ef6, \u548c\u4e00\u4e2a\u53ef\u4ee5\u5728VS Code\u4e2d\u8c03\u8bd5\u7684\u542f\u52a8\u914d\u7f6e\u6587\u4ef6."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},".\n\u251c\u2500\u2500 .vscode\n\u2502   \u2514\u2500\u2500 launch.json\n\u251c\u2500\u2500 main.csx\n\u2514\u2500\u2500 omnisharp.json\n")),(0,r.kt)("p",null,"\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u6587\u4ef6\u540d\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u6587\u4ef6\u5939."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script init custom.csx\n")),(0,r.kt)("p",null,"\u6211\u4eec\u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u540d\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"custom.csx")," \u7684\u6587\u4ef6, \u53d6\u4ee3\u4e86\u4e4b\u524d\u9ed8\u8ba4\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"main.csx")," \u6587\u4ef6."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},".\n\u251c\u2500\u2500 .vscode\n\u2502   \u2514\u2500\u2500 launch.json\n\u251c\u2500\u2500 custom.csx\n\u2514\u2500\u2500 omnisharp.json\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5907\u6ce8: \u5728\u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u811a\u672c\u7684\u6587\u4ef6\u5939\u6267\u884c ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet script init")," \u4e0d\u4f1a\u521b\u5efa ",(0,r.kt)("inlineCode",{parentName:"p"},"main.csx")," \u6587\u4ef6.")),(0,r.kt)("h3",{id:"\u8fd0\u884c\u811a\u672c"},"\u8fd0\u884c\u811a\u672c"),(0,r.kt)("p",null,"\u5982\u679c\u811a\u672c\u662f\u53ef\u6267\u884c\u6587\u4ef6, \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7shell\u6267\u884c."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"foo.csx arg1 arg2 arg3\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"OSX/Linux"),(0,r.kt)("p",{parentName:"blockquote"},"\u5c31\u50cf\u6240\u6709\u5176\u4ed6\u811a\u672c\u4e00\u6837, \u5728 OSX/Linux \u7cfb\u7edf\u4e2d, \u811a\u672c\u7b2c\u4e00\u884c\u9700\u8981\u6709 ",(0,r.kt)("inlineCode",{parentName:"p"},"!#"),", \u800c\u4e14\u5fc5\u987b\u901a\u8fc7\u547d\u4ee4 ",(0,r.kt)("strong",{parentName:"p"},"chmod +x foo.csx")," \u4f7f\u6587\u4ef6\u53d8\u6210\u53ef\u6267\u884c\u6587\u4ef6.\n\u4f7f\u7528 ",(0,r.kt)("strong",{parentName:"p"},"dotnet script init")," \u521b\u5efa\u7684csx\u6587\u4ef6\u4f1a\u81ea\u52a8\u6dfb\u52a0\u6307\u4ee4 ",(0,r.kt)("inlineCode",{parentName:"p"},"!#")," \u5e76\u6807\u8bb0csx\u6587\u4ef6\u4e3a\u53ef\u6267\u884c\u6587\u4ef6.")),(0,r.kt)("p",null,"OSX/Linux \u7cfb\u7edf\u7684 shebang \u6307\u4ee4\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"#!/usr/bin/env dotnet-script")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'#!/usr/bin/env dotnet-script\nConsole.WriteLine("Hello world");\n')),(0,r.kt)("p",null,"\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,r.kt)("strong",{parentName:"p"},"dotnet script")," \u6216\u8005 ",(0,r.kt)("strong",{parentName:"p"},"dotnet-script")," \u6765\u6267\u884c\u4f60\u7684\u811a\u672c, \u8fd9\u79cd\u65b9\u5f0f\u5141\u8bb8\u4f60\u901a\u8fc7\u4f20\u9012\u53c2\u6570\u6765\u63a7\u5236\u811a\u672c\u7684\u6267\u884c."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"foo.csx arg1 arg2 arg3\ndotnet script foo.csx -- arg1 arg2 arg3\ndotnet-script foo.csx -- arg1 arg2 arg3\n")),(0,r.kt)("h4",{id:"\u5411\u811a\u672c\u4e2d\u4f20\u9012\u53c2\u6570"},"\u5411\u811a\u672c\u4e2d\u4f20\u9012\u53c2\u6570"),(0,r.kt)("p",null,"\u6240\u6709 ",(0,r.kt)("inlineCode",{parentName:"p"},"--")," \u540e\u7684\u53c2\u6570\u90fd\u4f1a\u88ab\u4f20\u9012\u7ed9\u811a\u672c:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script foo.csx -- arg1 arg2 arg3\n")),(0,r.kt)("p",null,"\u7136\u540e\u4f60\u5728\u811a\u672c\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u5168\u5c40\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"Args"),"\u96c6\u5408\u6765\u8bbf\u95ee\u4f20\u9012\u8fdb\u6765\u7684\u53c2\u6570:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"foreach (var arg in Args)\n{\n    Console.WriteLine(arg);\n}\n")),(0,r.kt)("p",null,"\u6240\u6709 ",(0,r.kt)("inlineCode",{parentName:"p"},"--")," \u4e4b\u524d\u7684\u53c2\u6570\u90fd\u4f1a\u4ea4\u7531 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet script")," \u5904\u7406. \u6bd4\u5982\u4e0b\u9762\u7684\u547d\u4ee4: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script -d foo.csx -- -d\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"--")," \u4e4b\u524d\u7684\u53c2\u6570 ",(0,r.kt)("inlineCode",{parentName:"p"},"-d")," \u4f20\u9012\u7ed9 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet script")," \u7528\u4e8e\u5f00\u542fdebug\u6a21\u5f0f, \u800c ",(0,r.kt)("inlineCode",{parentName:"p"},"--")," \u540e\u9762\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"-d")," \u4f1a\u88ab\u4f20\u9012\u7ed9\u811a\u672c."),(0,r.kt)("h3",{id:"nuget-\u5305"},"NuGet \u5305"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dotnet script")," \u652f\u6301\u76f4\u63a5\u5728\u811a\u672c\u4e2d\u5f15\u7528Nuget\u5305(\u5185\u7f6e\u529f\u80fd). "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},'#r "nuget: AutoMapper, 6.1.0"\n')),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/1034073/30176983-98a6b85e-9404-11e7-8855-4ae65a20d6b1.gif",alt:"package"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5907\u6ce8: \u5728\u6dfb\u52a0\u4e86\u5305\u5f15\u7528\u4e4b\u540e\u9700\u8981\u91cd\u542f Omnisharp .")),(0,r.kt)("h4",{id:"nuget\u5305\u6e90"},"Nuget\u5305\u6e90"),(0,r.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u811a\u672c\u6839\u76ee\u5f55\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"NuGet.Config")," \u6587\u4ef6\u4e2d\u5b9a\u4e49\u5305\u6e90. \u53e6\u5916\u5728\u811a\u672c\u6267\u884c\u65f6, \u4f1a\u501f\u52a9\u63d0\u4f9b\u8bed\u8a00\u670d\u52a1\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"OmniSharp")," \u8fdb\u884c\u4ece\u5305\u6e90\u4e2d\u8fdb\u884c\u5305\u89e3\u6790."),(0,r.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u5728\u7528\u6237\u7ea7\u522b\u6216\u8005\u7cfb\u7edf\u7ea7\u522b\u5b9a\u4e49Nuget\u5305\u6e90(\u8fd9\u91cc\u6709\u76f8\u5173\u4ecb\u7ecd ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file"},"Configuring NuGet Behaviour")," )\u6765\u66ff\u4ee3\u672c\u5730",(0,r.kt)("inlineCode",{parentName:"p"},"Nuget.Config"),"\u7ef4\u62a4."),(0,r.kt)("p",null,"\u4e5f\u53ef\u4ee5\u5728\u6267\u884c\u811a\u672c\u7684\u65f6\u5019\u6307\u5b9a\u5305\u6e90."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script foo.csx -s https://SomePackageSource\n")),(0,r.kt)("p",null,"\u540c\u65f6\u6307\u5b9a\u591a\u4e2a\u5305\u6e90: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script foo.csx -s https://SomePackageSource -s https://AnotherPackageSource\n")),(0,r.kt)("h3",{id:"\u4ececsx\u6587\u4ef6\u521b\u5efadll\u6216\u8005\u53ef\u6267\u884c\u6587\u4ef6"},"\u4eceCSX\u6587\u4ef6\u521b\u5efaDLL\u6216\u8005\u53ef\u6267\u884c\u6587\u4ef6"),(0,r.kt)("p",null,"Dotnet-Script \u53ef\u4ee5\u4e3a\u4f60\u7684\u811a\u672c\u521b\u5efa\u72ec\u7acb\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005DLL\u6587\u4ef6."),(0,r.kt)("p",null,"\u6bd4\u5982 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet script publish main.csx -o publish_dir -c Release -d")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u5f00\u5173"),(0,r.kt)("th",{parentName:"tr",align:null},"\u5bf9\u5e94\u5168\u79f0\u5f00\u5173\u540d\u79f0"),(0,r.kt)("th",{parentName:"tr",align:null},"\u63cf\u8ff0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-o"),(0,r.kt)("td",{parentName:"tr",align:null},"--output"),(0,r.kt)("td",{parentName:"tr",align:null},"Directory where the published executable should be placed.  Defaults to a 'publish' folder in the current directory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-n"),(0,r.kt)("td",{parentName:"tr",align:null},"--name"),(0,r.kt)("td",{parentName:"tr",align:null},"The name for the generated DLL (executable not supported at this time).  Defaults to the name of the script.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"--dll"),(0,r.kt)("td",{parentName:"tr",align:null},"Publish to a .dll instead of an executable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-c"),(0,r.kt)("td",{parentName:"tr",align:null},"--configuration"),(0,r.kt)("td",{parentName:"tr",align:null},"Configuration to use for publishing the script ","[Release/Debug]",'. Default is "Debug"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-d"),(0,r.kt)("td",{parentName:"tr",align:null},"--debug"),(0,r.kt)("td",{parentName:"tr",align:null},"Enables debug output.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-r"),(0,r.kt)("td",{parentName:"tr",align:null},"--runtime"),(0,r.kt)("td",{parentName:"tr",align:null},"The runtime used when publishing the self contained executable. Defaults to your current runtime.")))),(0,r.kt)("p",null,"\u53d1\u5e03\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\u65e0\u9700\u4f9d\u8d56 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet install")," \u5373\u53ef\u6267\u884c. DLL\u53ef\u4ee5\u4f7f\u7528 .Net CLI \u6267\u884c:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script exec {path_to_dll} -- arg1 arg2\n")),(0,r.kt)("h3",{id:"\u7f13\u5b58"},"\u7f13\u5b58"),(0,r.kt)("p",null,"\u6211\u4eec\u63d0\u4f9b\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u7f13\u5b58 ",(0,r.kt)("inlineCode",{parentName:"p"},"dependency cache")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"execution cache"),". \u4e3a\u4e86\u4f7f\u7f13\u5b58\u80fd\u591f\u5f00\u542f, \u8981\u6c42NuGet\u5305\u5f15\u7528\u5fc5\u987b\u6307\u5b9a\u786e\u5207\u7684\u7248\u672c\u53f7. \u8fd9\u4e2a\u9650\u5236\u7684\u539f\u56e0\u662f ",(0,r.kt)("del",{parentName:"p"},"\u6211\u4eec\u65e0\u6cd5\u6267\u884c\u8fc7\u65f6\u4f9d\u8d56\u6811\u7684\u811a\u672c?")," (The reason for this constraint is that we need to make sure that we don't execute a script with a stale dependency graph.)"),(0,r.kt)("h4",{id:"\u4f9d\u8d56\u7f13\u5b58-dependency-cache"},"\u4f9d\u8d56\u7f13\u5b58 Dependency Cache"),(0,r.kt)("p",null,"\u4e3a\u4e86\u89e3\u51b3\u811a\u672c\u4f9d\u8d56, \u5728\u751f\u6210 ",(0,r.kt)("inlineCode",{parentName:"p"},"project.assets.json")," \u6587\u4ef6\u7684\u56de\u8c03\u4e2d\u6267\u884c ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet restore"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"project.assets.json")," \u6587\u4ef6\u6307\u5b9a\u4e86\u6240\u6709\u6dfb\u52a0\u5230\u7f16\u8bd1\u7684\u4f9d\u8d56."),(0,r.kt)("p",null,"This is an out-of-process operation and represents a significant overhead to the script execution. So this cache works by looking at all the dependencies specified in the script(s) either in the form of NuGet package references or assembly file references. If these dependencies matches the dependencies from the last script execution, we skip the restore and read the dependencies from the already generated ",(0,r.kt)("inlineCode",{parentName:"p"},"project.assets.json")," file. If any of the dependencies has changed, we must restore again to obtain the new dependency graph."),(0,r.kt)("h4",{id:"execution-cache"},"Execution cache"),(0,r.kt)("p",null,"In order to execute a script it needs to be compiled first and since that is a CPU and time consuming operation, we make sure that we only compile when the source code has changed. This works by creating a SHA256 hash from all the script files involved in the execution. This hash is written to a temporary location along with the DLL that represents the result of the script compilation. When a script is executed the hash is computed and compared with the hash from the previous compilation. If they match there is no need to recompile and we run from the already compiled DLL. If the hashes don't match, the cache is invalidated and we recompile."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can override this automatic caching by passing ",(0,r.kt)("strong",{parentName:"p"},"--nocache")," flag, which will bypass both caches and cause dependency resolution and script compilation to happen every time we execute the script.")),(0,r.kt)("h3",{id:"\u8c03\u8bd5"},"\u8c03\u8bd5"),(0,r.kt)("p",null,"\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"Console.WriteLine")," \u8fdb\u884c\u8c03\u8bd5\u7684\u65f6\u4ee3\u5df2\u7ecf\u8fc7\u53bb\u4e86. ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet script")," \u7684\u4e00\u4e2a\u4e3b\u8981\u7279\u6027\u662f\u80fd\u591f\u76f4\u63a5\u5728VS Code\u4e2d\u8c03\u8bd5\u811a\u672c. \u53ea\u9700\u8981\u5728\u4f60\u7684\u811a\u672c\u4e2d\u8bbe\u7f6e\u597d\u65ad\u70b9, \u7136\u540e\u6309\u4e0bF5\u5373\u53ef\u8c03\u8bd5"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/1034073/30173509-2f31596c-93f8-11e7-9124-ca884cf6564e.gif",alt:"debug"})),(0,r.kt)("h3",{id:"\u811a\u672c\u5305-script-packages"},"\u811a\u672c\u5305 Script Packages"),(0,r.kt)("p",null,"\u811a\u672c\u5305\u662f\u628a\u53ef\u590d\u7528\u811a\u672c\u7ec4\u7ec7\u597d\u53d1\u5e03\u5230Nuget\u5305\u7ba1\u7406, \u8ba9\u5176\u4ed6\u811a\u672c\u6d88\u8d39\u4f7f\u7528. \u8fd9\u610f\u5473\u7740\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u501f\u52a9\u73b0\u6709\u57fa\u7840\u8bbe\u65bd\u800c\u4e0d\u9700\u8981\u51ed\u501f\u81ea\u5df1\u7684\u529b\u91cf\u4ece\u5934\u5f00\u59cb."),(0,r.kt)("h4",{id:"\u521b\u5efa\u811a\u672c\u5305"},"\u521b\u5efa\u811a\u672c\u5305"),(0,r.kt)("p",null,"\u811a\u672c\u5305\u5c31\u662f\u4e00\u4e2a\u5e38\u89c4\u7684Nuget\u5305, \u811a\u672c\u6587\u4ef6\u5305\u542b\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," \u6216\u8005 ",(0,r.kt)("inlineCode",{parentName:"p"},"contentFiles")," \u6587\u4ef6\u5939\u4e2d."),(0,r.kt)("p",null,"\u4e0b\u9762\u7684\u4f8b\u5b50\u6f14\u793a\u4e86\u6839\u636e",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/nuget/schema/nuspec#including-content-files"},"standard convention"),"\u811a\u672c\u5305\u662f\u5982\u4f55\u5728Nuget\u4e2d\u5c55\u5f00\u7684."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"\u2514\u2500\u2500 contentFiles\n    \u2514\u2500\u2500 csx\n        \u2514\u2500\u2500 netstandard2.0\n            \u2514\u2500\u2500 main.csx\n")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u4f8b\u5b50\u4ec5\u4ec5\u5728\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.csx")," \u6587\u4ef6. \u4f46\u662f\u811a\u672c\u5305\u4e5f\u8bb8\u5728\u8ddf\u76ee\u5f55\u6216\u6839\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\u4e2d\u4e2d\u5305\u542b\u591a\u4e2a\u6587\u4ef6."),(0,r.kt)("p",null,"\u5f53\u52a0\u8f7d\u4e00\u4e2a\u811a\u672c\u5305\u7684\u65f6\u5019, \u4f1a\u5148\u5bfb\u627e\u5165\u53e3\u53bb\u52a0\u8f7d. \u5165\u53e3\u811a\u672c\u662f\u4e0b\u9762\u5176\u4e2d\u4e4b\u4e00: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6839\u76ee\u5f55\u4e2d\u53eb ",(0,r.kt)("inlineCode",{parentName:"li"},"main.csx")," \u7684\u811a\u672c"),(0,r.kt)("li",{parentName:"ul"},"\u6839\u76ee\u5f55\u4e2d\u4ec5\u6709\u7684\u811a\u672c\u6587\u4ef6 ")),(0,r.kt)("p",null,"\u5982\u679c\u4f9d\u636e\u4ee5\u4e0a\u89c4\u5219\u6ca1\u6709\u627e\u5230\u5165\u53e3\u811a\u672c, \u4f1a\u52a0\u8f7d\u5305\u4e2d\u7684\u6240\u6709\u811a\u672c\u6587\u4ef6"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u63d0\u4f9b\u5165\u53e3\u811a\u672c\u7684\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u5305\u4e2d\u5176\u4ed6\u811a\u672c\u52a0\u8f7d. ")),(0,r.kt)("h4",{id:"\u6d88\u8d39\u811a\u672c\u5305"},"\u6d88\u8d39\u811a\u672c\u5305"),(0,r.kt)("p",null,"\u6d88\u8d39\u811a\u672c\u5305, \u6211\u4eec\u53ea\u9700\u8981\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"#locad ")," \u6307\u4ee4\u4e2d\u6307\u5b9aNuget\u5305."),(0,r.kt)("p",null,"\u4e0b\u9762\u7684\u4f8b\u5b50\u52a0\u8f7d ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/simple-targets-csx"},"simple-targets")," \u5305\u4e2d\u5305\u542b\u7684\u811a\u672c\u6587\u4ef6\u5230\u6211\u4eec\u7684\u811a\u672c\u4e2d. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C#"},'#! "netcoreapp2.1"\n#load "nuget:simple-targets-csx, 6.0.0"\n\nusing static SimpleTargets;\nvar targets = new TargetDictionary();\n\ntargets.Add("default", () => Console.WriteLine("Hello, world!"));\n\nRun(Args, targets);\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5907\u6ce8: \u8c03\u8bd5\u811a\u672c\u5305\u4e5f\u662f\u652f\u6301\u7684, \u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u8fdb\u5165 ",(0,r.kt)("inlineCode",{parentName:"p"},"#load ")," \u6307\u4ee4\u5f15\u5165\u7684\u811a\u672c.")),(0,r.kt)("h3",{id:"\u8fdc\u7a0b\u811a\u672c"},"\u8fdc\u7a0b\u811a\u672c"),(0,r.kt)("p",null,"\u811a\u672c\u4e0d\u9700\u8981\u5b58\u5728\u4e8e\u672c\u673a. \u6211\u4eec\u53ef\u4ee5\u6267\u884c",(0,r.kt)("inlineCode",{parentName:"p"},"http(s)"),"\u53ef\u8bbf\u95ee\u7684\u811a\u672c. "),(0,r.kt)("p",null,"\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u521b\u5efaGist, \u7136\u540e\u6267\u884c: "),(0,r.kt)("p",null,"\u8fd9\u4e2a ",(0,r.kt)("a",{parentName:"p",href:"https://gist.githubusercontent.com/seesharper/5d6859509ea8364a1fdf66bbf5b7923d/raw/0a32bac2c3ea807f9379a38e251d93e39c8131cb/HelloWorld.csx"},"Gist"),' \u5305\u542b\u6253\u5370 "Hello World" \u5b57\u7b26\u4e32\u7684\u811a\u672c'),(0,r.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u50cf\u4ee5\u4e0b\u8fd9\u6837\u6267\u884c\u811a\u672c:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script https://gist.githubusercontent.com/seesharper/5d6859509ea8364a1fdf66bbf5b7923d/raw/0a32bac2c3ea807f9379a38e251d93e39c8131cb/HelloWorld.csx\n")),(0,r.kt)("p",null,"URL \u592a\u957f\u4e86, \u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u77ed\u94fe\u670d\u52a1 ",(0,r.kt)("a",{parentName:"p",href:"https://tinyurl.com/"},"TinyURL"),": "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script https://tinyurl.com/y8cda9zt\n")),(0,r.kt)("h3",{id:"script-location"},"Script Location"),(0,r.kt)("p",null,"\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u573a\u666f\u662f\u6211\u4eec\u7684\u903b\u8f91\u9700\u8981\u5173\u8054\u811a\u672c\u8def\u5f84. \u6211\u4eec\u4e0d\u60f3\u8ba9\u7528\u6237\u6765\u786e\u5b9a\u8fd9\u4e9b\u8def\u5f84, \u4e0b\u9762\u63d0\u4f9b\u4e86\u811a\u672c\u5f53\u524d\u6267\u884c\u7684\u8def\u5f84\u548c\u6587\u4ef6\u5939: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public static string GetScriptPath([CallerFilePath] string path = null) => path;\npublic static string GetScriptFolder([CallerFilePath] string path = null) => Path.GetDirectoryName(path);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u63d0\u793a: \u628a\u8fd9\u4e9b\u65b9\u6cd5\u653e\u5230\u4e00\u4e2a\u72ec\u7acb\u811a\u672c, \u4f5c\u4e3a\u9876\u5c42\u65b9\u6cd5. \u7136\u540e\u5728\u4f60\u9700\u8981\u8bbf\u95ee\u7684\u811a\u672c\u6587\u4ef6\u91cc\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"#load ")," \u6307\u4ee4\u5f15\u7528. ")),(0,r.kt)("h2",{id:"repl"},"REPL"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u7248\u672c\u4e2d\u5305\u542b\u4e86C# REPL (Read-Evaluate-Print-Loop). \u6267\u884c\u65e0\u53c2\u6570\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script")," \u5f00\u542f REPL \u6a21\u5f0f."),(0,r.kt)("p",null,"\u8fd9\u4e2a\u4ea4\u4e92\u6a21\u5f0f\u5141\u8bb8\u4f60\u63d0\u4f9b\u5355\u72ec\u7684C#\u4ee3\u7801\u5757, \u7136\u540e\u6309\u4e0b",(0,r.kt)("kbd",null,"Enter"),"\u7acb\u5373\u6267\u884c. REPL \u548c \u5e38\u89c4\u7684 CSX \u811a\u672c\u4e00\u6837\u4f7f\u7528\u76f8\u540c\u7684\u88c5\u914d\u96c6\u5f15\u7528\u548cusing\u8bed\u53e5."),(0,r.kt)("h3",{id:"\u57fa\u672c\u4f7f\u7528"},"\u57fa\u672c\u4f7f\u7528"),(0,r.kt)("p",null,"Once ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet-script")," starts you will see a prompt for input. You can start typing C# code there."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"~$ dotnet script\n> var x = 1;\n> x+x\n2\n")),(0,r.kt)("p",null,"If you submit an unterminated expression into the REPL (no ",(0,r.kt)("inlineCode",{parentName:"p"},";")," at the end), it will be evaluated and the result will be serialized using a formatter and printed in the output. This is a bit more interesting than just calling ",(0,r.kt)("inlineCode",{parentName:"p"},"ToString()")," on the object, because it attempts to capture the actual structure of the object. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'~$ dotnet script\n> var x = new List<string>();\n> x.Add("foo");\n> x\nList<string>(1) { "foo" }\n> x.Add("bar");\n> x\nList<string>(2) { "foo", "bar" }\n>\n')),(0,r.kt)("h3",{id:"inline-nuget-packages"},"Inline Nuget packages"),(0,r.kt)("p",null,"REPL also supports inline Nuget packages - meaning the Nuget packages can be installed into the REPL from ",(0,r.kt)("em",{parentName:"p"},"within the REPL"),". This is done via our ",(0,r.kt)("inlineCode",{parentName:"p"},"#r")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"#load")," from Nuget support and uses identical syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'~$ dotnet script\n> #r "nuget: Automapper, 6.1.1"\n> using AutoMapper;\n> typeof(MapperConfiguration)\n[AutoMapper.MapperConfiguration]\n> #load "nuget: simple-targets-csx, 6.0.0";\n> using static SimpleTargets;\n> typeof(TargetDictionary)\n[Submission#0+SimpleTargets+TargetDictionary]\n')),(0,r.kt)("h3",{id:"multiline-mode"},"Multiline mode"),(0,r.kt)("p",null,"Using Roslyn syntax parsing, we also support multiline REPL mode. This means that if you have an uncompleted code block and press ",(0,r.kt)("kbd",null,"Enter"),", we will automatically enter the multiline mode. The mode is indicated by the ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," character. This is particularly useful for declaring classes and other more complex constructs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"~$ dotnet script\n> class Foo {\n* public string Bar {get; set;}\n* }\n> var foo = new Foo();\n")),(0,r.kt)("h3",{id:"repl-commands"},"REPL commands"),(0,r.kt)("p",null,"Aside from the regular C# script code, you can invoke the following commands (directives) from within the REPL:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Command"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"#load")),(0,r.kt)("td",{parentName:"tr",align:null},"Load a script into the REPL (same as ",(0,r.kt)("inlineCode",{parentName:"td"},"#load")," usage in CSX)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"#r")),(0,r.kt)("td",{parentName:"tr",align:null},"Load an assembly into the REPL (same as ",(0,r.kt)("inlineCode",{parentName:"td"},"#r")," usage in CSX)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"#reset")),(0,r.kt)("td",{parentName:"tr",align:null},"Reset the REPL back to initial state (without restarting it)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"#cls")),(0,r.kt)("td",{parentName:"tr",align:null},"Clear the console screen without resetting the REPL state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"#exit")),(0,r.kt)("td",{parentName:"tr",align:null},"Exits the REPL")))),(0,r.kt)("h3",{id:"seeding-repl-with-a-script"},"Seeding REPL with a script"),(0,r.kt)("p",null,'You can execute a CSX script and, at the end of it, drop yourself into the context of the REPL. This way, the REPL becomes "seeded" with your code - all the classes, methods or variables are available in the REPL context. This is achieved by running a script with an ',(0,r.kt)("inlineCode",{parentName:"p"},"-i")," flag."),(0,r.kt)("p",null,"For example, given the following CSX script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var msg = "Hello World";\nConsole.WriteLine(msg);\n')),(0,r.kt)("p",null,"When you run this with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-i")," flag, ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello World")," is printed, REPL starts and ",(0,r.kt)("inlineCode",{parentName:"p"},"msg")," variable is available in the REPL context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"~$ dotnet script foo.csx -i\nHello World\n>\n")),(0,r.kt)("p",null,"You can also seed the REPL from inside the REPL - at any point - by invoking a ",(0,r.kt)("inlineCode",{parentName:"p"},"#load")," directive pointed at a specific file. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'~$ dotnet script\n> #load "foo.csx"\nHello World\n>\n')),(0,r.kt)("h2",{id:"\u7ba1\u9053"},"\u7ba1\u9053"),(0,r.kt)("p",null,"\u4e0b\u9762\u7684\u4f8b\u5b50\u6f14\u793a\u4e86\u5982\u4f55\u5728\u811a\u672c\u4e2d\u4f7f\u7528\u8f93\u5165/\u8f93\u51fa\u7684\u7ba1\u9053\u6570\u636e."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UpperCase.csx")," \u811a\u672c\u7b80\u5355\u5730\u628a\u6807\u51c6\u8f93\u5165\u8f6c\u6362\u6210\u5927\u5199\u540e\u5199\u5165\u5230\u6807\u51c6\u8f93\u51fa\u4e2d."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'#! "netcoreapp2.1"\nusing (var streamReader = new StreamReader(Console.OpenStandardInput()))\n{\n    Write(streamReader.ReadToEnd().ToUpper());\n}\n')),(0,r.kt)("p",null,"\u6211\u4eec\u73b0\u5728\u7b80\u5355\u5730\u628a\u4e00\u4e2a\u547d\u4ee4\u7684\u8f93\u51fa\u8f6c\u5165\u5230\u6211\u4eec\u7684\u811a\u672c\u4e2d:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo "This is some text" | dotnet script UpperCase.csx\nTHIS IS SOME TEXT\n')),(0,r.kt)("h3",{id:"\u8c03\u8bd5-1"},"\u8c03\u8bd5"),(0,r.kt)("p",null,"The first thing we need to do add the following to the ",(0,r.kt)("inlineCode",{parentName:"p"},"launch.config")," file that allows VS Code to debug a running process."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n    "name": ".NET Core Attach",\n    "type": "coreclr",\n    "request": "attach",\n    "processId": "${command:pickProcess}"\n}\n')),(0,r.kt)("p",null,"To debug this script we need a way to attach the debugger in VS Code and to the simplest thing we can do here is to wait for the debugger to attach by adding this method somewhere."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},'public static void WaitForDebugger()\n{\n    Console.WriteLine("Attach Debugger (VS Code)");\n    while(!Debugger.IsAttached)\n    {\n    }\n}\n')),(0,r.kt)("p",null,"To debug the script when executing it from the command line we can do something like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},'#! "netcoreapp2.0"\n#r "nuget: NetStandard.Library, 2.0.0"\nWaitForDebugger();\nusing (var streamReader = new StreamReader(Console.OpenStandardInput()))\n{\n    Write(streamReader.ReadToEnd().ToUpper()); // <- SET BREAKPOINT HERE\n}\n')),(0,r.kt)("p",null,"Now when we run the script from the command line we will get"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ echo "This is some text" | dotnet script UpperCase.csx\nAttach Debugger (VS Code)\n')),(0,r.kt)("p",null,"This now gives us a chance to attach the debugger before stepping into the script and from VS Code, select the  ",(0,r.kt)("inlineCode",{parentName:"p"},".NET Core Attach")," debugger and pick the process that represents the executing script."),(0,r.kt)("p",null,"Once that is done we should see out breakpoint being hit."),(0,r.kt)("h2",{id:"configurationdebugrelease"},"Configuration(Debug/Release)"),(0,r.kt)("p",null,"By default, scripts will be compiled using the ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," configuration. This is to ensure that we can debug a script in VS Code as well as attaching a debugger for long running scripts."),(0,r.kt)("p",null,"There are however situations where we might need to execute a script that is compiled with the ",(0,r.kt)("inlineCode",{parentName:"p"},"release")," configuration. For instance, running benchmarks using ",(0,r.kt)("a",{parentName:"p",href:"http://benchmarkdotnet.org/"},"BenchmarkDotNet")," is not possible unless the script is compiled with the ",(0,r.kt)("inlineCode",{parentName:"p"},"release")," configuration."),(0,r.kt)("p",null,"We can specify this when executing the script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet script foo.csx -c release\n")),(0,r.kt)("h2",{id:"team"},"Team"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/seesharper"},"Bernhard Richter")," (",(0,r.kt)("a",{parentName:"li",href:"https://twitter.com/bernhardrichter"},"@bernhardrichter"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/filipw"},"Filip W")," (",(0,r.kt)("a",{parentName:"li",href:"https://twitter.com/filip_woj"},"@filip_woj"),")")),(0,r.kt)("h2",{id:"license"},"License"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/filipw/dotnet-script/blob/master/LICENSE"},"MIT License")))}m.isMDXComponent=!0}}]);