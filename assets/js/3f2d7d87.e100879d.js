"use strict";(self.webpackChunkalan_blog=self.webpackChunkalan_blog||[]).push([[41145],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},97207:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={title:"Dart Visual Studio Code \u63a8\u8350\u8bbe\u7f6e",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:["dart","vsc","visual studio code"],draft:!1,hide_table_of_contents:!1},i=void 0,l={permalink:"/blog/2022/02/19/dart-visual-studio-code-settings",editUrl:"https://github.com/alanwei43/blog/tree/master/src/blog/2022/02/19-dart-visual-studio-code-settings.md",source:"@site/src/blog/2022/02/19-dart-visual-studio-code-settings.md",title:"Dart Visual Studio Code \u63a8\u8350\u8bbe\u7f6e",description:"Dart Visual Studio Code \u63a8\u8350\u8bbe\u7f6e",date:"2022-02-19T00:00:00.000Z",formattedDate:"February 19, 2022",tags:[{label:"dart",permalink:"/blog/tags/dart"},{label:"vsc",permalink:"/blog/tags/vsc"},{label:"visual studio code",permalink:"/blog/tags/visual-studio-code"}],readingTime:1.425,hasTruncateMarker:!0,authors:[{name:"Alan",title:"Maintainer of blog",url:"https://github.com/alanwei43",imageURL:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4"}],frontMatter:{title:"Dart Visual Studio Code \u63a8\u8350\u8bbe\u7f6e",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:["dart","vsc","visual studio code"],draft:!1,hide_table_of_contents:!1},prevItem:{title:"Flutter\u8fdc\u7a0b\u8c03\u8bd5Android\u8bbe\u5907",permalink:"/blog/2022/02/20/flutter-remote-debug-android-device"},nextItem:{title:"GitHub QA",permalink:"/blog/2022/02/18/github-qa"}},s={authorsImageUrls:[void 0]},u=[],c={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dartcode.org/docs/recommended-settings/"},"Dart Visual Studio Code \u63a8\u8350\u8bbe\u7f6e")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    // Causes the debug view to automatically appear when a breakpoint is hit. This\n    // setting is global and not configurable per-language.\n    "debug.openDebug": "openOnDebugBreak",\n\n    "[dart]": {\n        // Automatically format code on save and during typing of certain characters\n        // (like `;` and `}`).\n        "editor.formatOnSave": true,\n        "editor.formatOnType": true,\n\n        // Draw a guide line at 80 characters, where Dart\'s formatting will wrap code.\n        "editor.rulers": [80],\n\n        // Disables built-in highlighting of words that match your selection. Without\n        // this, all instances of the selected text will be highlighted, interfering\n        // with Dart\'s ability to highlight only exact references to the selected variable.\n        "editor.selectionHighlight": false,\n\n        // By default, VS Code prevents code completion from popping open when in\n        // "snippet mode" (editing placeholders in inserted code). Setting this option\n        // to `false` stops that and allows completion to open as normal, as if you\n        // weren\'t in a snippet placeholder.\n        "editor.suggest.snippetsPreventQuickSuggestions": false,\n\n        // By default, VS Code will pre-select the most recently used item from code\n        // completion. This is usually not the most relevant item.\n        //\n        // "first" will always select top item\n        // "recentlyUsedByPrefix" will filter the recently used items based on the\n        //     text immediately preceding where completion was invoked.\n        "editor.suggestSelection": "first",\n\n        // Allows pressing <TAB> to complete snippets such as `for` even when the\n        // completion list is not visible.\n        "editor.tabCompletion": "onlySnippets",\n\n        // By default, VS Code will populate code completion with words found in the\n        // current file when a language service does not provide its own completions.\n        // This results in code completion suggesting words when editing comments and\n        // strings. This setting will prevent that.\n        "editor.wordBasedSuggestions": false,\n    }\n}\n')))}d.isMDXComponent=!0}}]);