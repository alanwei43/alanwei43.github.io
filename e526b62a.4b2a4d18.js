(window.webpackJsonp=window.webpackJsonp||[]).push([[375],{445:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var o=n(3),s=n(7),a=(n(0),n(493)),i={title:"\u67e5\u770b\u5f53\u524d\u673a\u5668\u7684\u6240\u6709SSH\u8fde\u63a5",author:"Alan",author_title:"Maintainer of blog",author_url:"https://github.com/alanwei43",author_image_url:"https://avatars.githubusercontent.com/u/2927578?s=460&u=153132e7aa3be8295a1703af9b759ca22338f557&v=4",tags:["linux","ssh"],description:"\u67e5\u770b\u5f53\u524d\u673a\u5668\u7684\u6240\u6709SSH\u8fde\u63a5",draft:!1,hide_table_of_contents:!1},r={permalink:"/blog/2021/04/11/linux-show-ssh-connection",editUrl:"https://github.com/alanwei43/blog/tree/master/src/blog/2021-04-11-linux-show-ssh-connection.md",source:"@site/src/blog/2021-04-11-linux-show-ssh-connection.md",description:"\u67e5\u770b\u5f53\u524d\u673a\u5668\u7684\u6240\u6709SSH\u8fde\u63a5",date:"2021-04-11T00:00:00.000Z",tags:[{label:"linux",permalink:"/blog/tags/linux"},{label:"ssh",permalink:"/blog/tags/ssh"}],title:"\u67e5\u770b\u5f53\u524d\u673a\u5668\u7684\u6240\u6709SSH\u8fde\u63a5",readingTime:4.45,truncated:!0,prevItem:{title:"\u914d\u7f6eIIS\u53cd\u5411\u4ee3\u7406\u6559\u7a0b",permalink:"/blog/2021/04/11/iis-reverse-proxy"},nextItem:{title:"\u4f7f\u7528 Node \u6267\u884c\u547d\u4ee4\u884c\u7a0b\u5e8f",permalink:"/blog/2021/04/11/node-exec-bash-cmd"}},c=[{value:"Using <code>ss</code> command",id:"using-ss-command",children:[]},{value:"Using <code>last</code> command",id:"using-last-command",children:[]},{value:"Using <code>who</code> command",id:"using-who-command",children:[]},{value:"Using <code>w</code> command",id:"using-w-command",children:[]},{value:"Using <code>netstat</code> command",id:"using-netstat-command",children:[]},{value:"Using <code>ps</code> command",id:"using-ps-command",children:[]},{value:"Check ssh connection history",id:"check-ssh-connection-history",children:[]}],l={toc:c};function d(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"https://www.golinuxcloud.com/list-check-active-ssh-connections-linux/"},"\u539f\u6587 - 6 commands to check and list active SSH connections in Linux")),Object(a.b)("h2",{id:"using-ss-command"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"ss")," command"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ss")," is used to dump socket statistics. It allows showing information similar to netstat. It can display more TCP and state information than other tools. We will use grep function to only get the list of active SSH sessions on our local host"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tty"},"[root@node3 ~]# ss | grep -i ssh\ntcp    ESTAB      0      0      10.0.2.32:ssh                  10.0.2.31:37802\ntcp    ESTAB      0      64     10.0.2.32:ssh                  10.0.2.2:49966\ntcp    ESTAB      0      0      10.0.2.32:ssh                  10.0.2.30:56088\n")),Object(a.b)("p",null,"From the above example we know that there are three hosts which are currently connected to our node3. We have active SSH connections from ",Object(a.b)("em",{parentName:"p"},"10.0.2.31"),", ",Object(a.b)("em",{parentName:"p"},"10.0.2.30")," and ",Object(a.b)("em",{parentName:"p"},"10.0.2.2")),Object(a.b)("h2",{id:"using-last-command"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"last")," command"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"last")," searches back through the file ",Object(a.b)("inlineCode",{parentName:"p"},"/var/log/wtmp")," (or the file designated by the ",Object(a.b)("inlineCode",{parentName:"p"},"-f")," flag) and displays a list of all users logged in (and out) since that file was created. Names of users and tty\u2019s can be given, in which case last will show only those entries matching the arguments."),Object(a.b)("p",null,"Using this command you can also get the information about the user using which the SSH connection was created between server and client. So below we know the connection from 10.0.2.31 is done using ",Object(a.b)("inlineCode",{parentName:"p"},"deepak")," user, while for other two hosts, ",Object(a.b)("inlineCode",{parentName:"p"},"root")," user was used for connecting to node3."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tty"},"[root@node3 ~]# last -a | grep -i still\ndeepak   pts/1        Fri May 31 16:58   still logged in    10.0.2.31\nroot     pts/2        Fri May 31 16:50   still logged in    10.0.2.30\nroot     pts/0        Fri May 31 09:17   still logged in    10.0.2.2\n")),Object(a.b)("p",null,"Here I am grepping for a string \u201cstill\u201d to get all the patterns with \u201cstill logged in\u201c. So now we know we have three active SSH connections from ",Object(a.b)("em",{parentName:"p"},"10.0.2.31"),", ",Object(a.b)("em",{parentName:"p"},"10.0.2.30")," and ",Object(a.b)("em",{parentName:"p"},"10.0.2.2")),Object(a.b)("h2",{id:"using-who-command"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"who")," command"),Object(a.b)("p",null,"who is used to show who is logged on on your Linux host. This tool can also give this information"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tty"},"[root@node3 ~]# who\nroot     pts/0        2019-05-31 09:17 (10.0.2.2)\nroot     pts/1        2019-05-31 16:47 (10.0.2.31)\nroot     pts/2        2019-05-31 16:50 (10.0.2.30)\n")),Object(a.b)("p",null,"Using this command we also get similar information as from last command. Now you get the user details used for connecting to node3 from source host, also we have terminal information on which the session is still active."),Object(a.b)("p",null,"We generally hear terminal as tty but here we see terminal is referenced as pts, but now:\nWhat is the difference between tty and pts?\nHow to disable or enable individual tty terminal console in Linux?"),Object(a.b)("h2",{id:"using-w-command"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"w")," command"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"w")," displays information about the users currently on the machine, and their processes. This gives more information than who and last command and also serves our purpose to get the list of active SSH connections. Additionally it also gives us the information of the running process on those sessions."),Object(a.b)("p",null,"Using ",Object(a.b)("inlineCode",{parentName:"p"},"w")," command you will also get the idle time details, i.e. for how long the session is idle. If the SSH session is idle for long period then it is a security breach and it is recommended that such idle SSH session must be killed, you can configure your Linux host to automatically kill such idle SSH session."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tty"},"[root@node3 ~]# w\n 17:01:41 up  7:44,  3 users,  load average: 0.00, 0.01, 0.05\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    10.0.2.2         09:17    9:41   0.31s  0.00s less -s\ndeepak   pts/1    10.0.2.31        16:58    3:06   0.03s  0.03s -bash\nroot     pts/2    10.0.2.30        16:50    5.00s  0.07s  0.02s w\n")),Object(a.b)("h2",{id:"using-netstat-command"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"netstat")," command"),Object(a.b)("p",null,"Similar to ss we have netstat command to show active ssh sessions. Actually we can also say that ss is the new version of netstat. Here we can see all the ESTABLISHED SSH sessions from remote hosts to our localhost node3. it is also possible that one or some of these active ssh connections are in hung state so you can configure your host to automatically disconnect or kill these hung or unresponsive ssh sessions in Linux."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tty"},"[root@node3 ~]# netstat -tnpa | grep 'ESTABLISHED.*sshd'\ntcp        0      0 10.0.2.32:22            10.0.2.31:37806         ESTABLISHED 10295/sshd: deepak\ntcp        0      0 10.0.2.32:22            10.0.2.2:49966          ESTABLISHED 4329/sshd: root@pts\ntcp        0      0 10.0.2.32:22            10.0.2.30:56088         ESTABLISHED 10125/sshd: root@pt\n")),Object(a.b)("p",null,"ALSO READ:"),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"https://www.golinuxcloud.com/disconnect-idle-ssh-session-tcpkeepaliv-linux/"},"How to disconnect idle ssh session or keep idle ssh session active in Linux")),Object(a.b)("h2",{id:"using-ps-command"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"ps")," command"),Object(a.b)("p",null,"Now to show active ssh sessions, ps command may not give you accurate results like other commands we discussed in this article but it can give you some more additional information i.e. PID of the SSHD process which are currently active and connected."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tty"},"> ps auxwww | grep sshd: | grep -v grep\nroot      4329  0.0  0.1 154648  5512 ?        Ss   09:17   0:00 sshd: root@pts/0\nroot     10125  0.0  0.1 154648  5532 ?        Ss   16:50   0:00 sshd: root@pts/2\nroot     10295  0.0  0.1 154648  5480 ?        Ss   16:58   0:00 sshd: deepak [priv]\ndeepak   10301  0.0  0.0 156732  2964 ?        S    16:58   0:00 sshd: deepak@pts/1\n")),Object(a.b)("h2",{id:"check-ssh-connection-history"},"Check ssh connection history"),Object(a.b)("p",null,"To get the ssh connection history you can always check your SSHD logs for more information on connected or disconnected SSH session. Now the sshd log file may vary from distribution to distribution. On my RHEL 7.4 my sshd logs are stored inside ",Object(a.b)("inlineCode",{parentName:"p"},"/var/log/sshd")),Object(a.b)("p",null,"Lastly I hope the steps from the article to check active SSH connections and ssh connection history in Linux was helpful. So, let me know your suggestions and feedback using the comment section."))}d.isMDXComponent=!0},493:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var o=n(0),s=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,s=function(e,t){if(null==e)return{};var n,o,s={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),d=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},m=s.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,h=p["".concat(i,".").concat(m)]||p[m]||u[m]||a;return n?s.a.createElement(h,r(r({ref:t},l),{},{components:n})):s.a.createElement(h,r({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var l=2;l<a;l++)i[l]=n[l];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);